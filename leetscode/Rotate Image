class Solution {
public:
    void rotate(vector<vector<int>>& matrix) {
        int n = matrix.size();
        for (int i = 0; i < n; i++) {
            for (int j = i; j < n; j++) {
                swap(matrix[i][j], matrix[j][i]);
            }
        }
        int first = 0;
        int last = n - 1;
        for (int i = 0; i < n; i++) {
            if (first < last) {
                swap(matrix[i][first], matrix[i][last]);
                if (i == n - 1) {
                    first++;
                    last--;
                    i = -1;
                }
            }
        }
    }
};

//optimal
class Solution {
public:
    void rotate(vector<vector<int>>& matrix) {
        int n = matrix.size()-1;
        for(int i=0; i<=n/2; i++){
            for(int j = i ; j < n-i; j++){
                int temp = matrix[i][j];
                matrix[i][j] = matrix[n-j][i];
                matrix[n-j][i] = matrix[n-i][n-j];
                matrix[n-i][n-j] = matrix[j][n-i];
                matrix[j][n-i] = temp;
            }
            
        }
    }
};
