int longestSubarrayWithSumK(vector<int> a, long long k) {

    // Write your code here

    int n=a.size();

    int l=0,r=0;

    long long sum=a[0];

    int maxLen=0;

    while(r<n){

        while(l<=r && sum>k){

            sum-=a[l];

            l++;

        }

        if(sum==k){

            maxLen=max(maxLen,r-l+1);

        }

        r++;

        if(r<n){

            sum+=a[r];

        }

    }

    return maxLen;

}




//using hashmap


#include <bits/stdc++.h>
int getLongestSubarray(vector<int> &nums, int k) {
  map<long long, int> mpp;
  long long sum = 0;
  int maxLen = 0;
  for (int i = 0; i < nums.size(); i++) {
    sum += nums[i];
    if (sum == k) {
      maxLen = max(maxLen, i + 1);
    }
    long long rem = sum - k;
    if (mpp.find(rem) != mpp.end()) {
      int len = i - mpp[rem];
      maxLen = max(maxLen, len);
    }
    if (mpp.find(sum) == mpp.end()) {
      mpp[sum] = i;
    }
  }
  return maxLen;
}
